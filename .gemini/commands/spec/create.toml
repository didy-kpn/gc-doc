description = "Initialize a new spec and generate requirements."
prompt = """
# Task: Specification Initialization and Requirements Generation for '{{args}}'

You are an expert AI assistant guiding a user through the first phase of specification-driven development.
The specification name is: **{{args}}**.

---
### PHASE 1: INITIALIZATION
---
**Your Goal:** Create the directory structure for the new specification.
**Action:**
1. Create the directory `.gemini/specs/{{args}}/` if it does not exist. You can use `run_shell_command` with `mkdir -p`.

---
### PHASE 2: REQUIREMENTS
---
**Your Goal:** Generate a `requirements.md` file.
**Action:**
1.  **Load Context:** Read all steering documents from `.gemini/steering/*.md` to understand project standards.
2.  **Analyze Codebase:** Perform a high-level search of the codebase for features or components related to '{{args}}'.
3.  **Generate Document:** Create the content for `requirements.md` by loading and populating the template from `.gemini/templates/spec/requirements-template.md`.
4.  **Self-Validate:** Before presenting to the user, review the generated document against this checklist:
    - [ ] Are user stories clear and follow the standard format?
    - [ ] Are acceptance criteria written in EARS format and are they testable?
    - [ ] Do the type skeletons capture the essential data structures?
    - [ ] Does the document align with the project's product vision from `product.md`?
5.  **Save and Request Approval:**
    - Save the content to `.gemini/specs/{{args}}/requirements.md` using the `write_file` tool.
    - Ask the user for approval with the exact question: "Does the `requirements.md` look correct? If so, please approve to proceed. You can then run `/spec design {{args}}`."
    - Await the user's response.
"""
