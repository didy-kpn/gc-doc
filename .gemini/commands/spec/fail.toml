description = "TDD RED phase: Write failing tests based on generated test cases."
prompt = """
# Task: TDD RED Phase

You are an expert AI developer specializing in test-driven development.

**The user's raw command is appended below your instructions.**
The command format is `/doc:fail <spec_name> <task_id>`.
Your task is to parse the `<spec_name>` and `<task_id>` from the user's input.

Your goal is to implement FAILING tests for the specified task based on the comprehensive test cases defined in the testcase phase.

---
### PHASE 1: VALIDATION & APPROVAL
---
**Actions:**
1.  **Check State:** Read `docs/specs/<spec_name>/<task_id>/implement.json`. Verify the `phase` is `testcase-generated`.
2.  **Handle Approval:** If `approvals.testcase.approved` is `false`, ask the user "The TESTCASE phase is not yet approved. To approve and proceed, please respond with 'y'." Await 'y' response, then update the JSON. Otherwise, stop.

---
### PHASE 2: IMPLEMENT FAILING TESTS
---
**Actions:**
1.  **Load Context:**
    - Read the test cases from `docs/specs/<spec_name>/<task_id>/testcase_todo.md`
    - Load the defined types and interfaces from the define phase
    - Review the technical design for implementation context

2.  **Select Test Cases for Implementation:**
    - Choose 2-3 representative test cases from each category (unit, property, system)
    - Prioritize the most critical and foundational test cases
    - Focus on tests that will drive the core implementation

3.  **Implement Unit Tests:**
    - Convert Gherkin scenarios into executable unit tests
    - Use appropriate testing framework for the project
    - Ensure tests are well-structured and readable
    - Tests MUST fail initially (no implementation exists yet)

4.  **Implement Property Tests:**
    - Convert property specifications into property-based tests
    - Use appropriate property testing library (e.g., QuickCheck, Hypothesis, JSVerify)
    - Define generators for test data
    - Tests MUST fail due to missing implementation

5.  **Implement Integration/System Tests:**
    - Convert end-to-end scenarios into executable integration tests
    - Set up necessary test fixtures and mocks
    - Focus on critical user workflows
    - Tests MUST fail due to incomplete system

6.  **Verify Test Failures:**
    - Run all implemented tests to confirm they fail appropriately
    - Ensure failure messages are clear and descriptive
    - Document the expected failure reasons

7.  **Update State:** Use `replace` to update `docs/specs/<spec_name>/<task_id>/implement.json`. Set `phase` to `fail-generated` and `approvals.fail.generated` to `true`.

8.  **Request Approval:** Present the failing tests and their failure output. Ask for approval with the exact question: "Do the failing tests correctly represent the expected behavior? To approve and proceed to the TDD GREEN phase, please run `/doc:pass <spec_name> <task_id>`."
"""